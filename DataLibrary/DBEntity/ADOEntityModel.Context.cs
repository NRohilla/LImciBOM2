//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLibrary.DBEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineBOMEntities : DbContext
    {
        public OnlineBOMEntities()
            : base("name=OnlineBOMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Assembly> Assemblies { get; set; }
        public virtual DbSet<AssemblyCategory> AssemblyCategories { get; set; }
        public virtual DbSet<BOM> BOMs { get; set; }
        public virtual DbSet<BOMItem> BOMItems { get; set; }
        public virtual DbSet<BOMTemplate> BOMTemplates { get; set; }
        public virtual DbSet<BOMtoAssembly> BOMtoAssemblies { get; set; }
        public virtual DbSet<InternalBOMItem> InternalBOMItems { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
        public virtual DbSet<ItemSubCategory> ItemSubCategories { get; set; }
        public virtual DbSet<LeadTimeForAssembly> LeadTimeForAssemblies { get; set; }
        public virtual DbSet<Opportunity> Opportunities { get; set; }
        public virtual DbSet<OpportunityBOMList> OpportunityBOMLists { get; set; }
        public virtual DbSet<ParentChildPart> ParentChildParts { get; set; }
        public virtual DbSet<PartToCapitalAssembly_DEL> PartToCapitalAssembly_DEL { get; set; }
        public virtual DbSet<PartToCategory> PartToCategories { get; set; }
        public virtual DbSet<PMFeeNotChargable> PMFeeNotChargables { get; set; }
        public virtual DbSet<PMFeeNotChargable_DEL> PMFeeNotChargable_DEL { get; set; }
        public virtual DbSet<ProjectMilestone> ProjectMilestones { get; set; }
        public virtual DbSet<Teritory> Teritories { get; set; }
        public virtual DbSet<Configuration_DEL> Configuration_DEL { get; set; }
        public virtual DbSet<ImplementationAssembly> ImplementationAssemblies { get; set; }
        public virtual DbSet<SaleType> SaleTypes { get; set; }
    
        public virtual int CreateLead(string customerName, Nullable<System.DateTime> leadDate, string leadBy, string leadNumber, Nullable<int> noOfWeeks, Nullable<System.DateTime> delivaeryDate, string pONumber, string dispatchAddress, string dispatchName, string title, string phoneNumber, string email, string cRMNumber)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var leadDateParameter = leadDate.HasValue ?
                new ObjectParameter("LeadDate", leadDate) :
                new ObjectParameter("LeadDate", typeof(System.DateTime));
    
            var leadByParameter = leadBy != null ?
                new ObjectParameter("LeadBy", leadBy) :
                new ObjectParameter("LeadBy", typeof(string));
    
            var leadNumberParameter = leadNumber != null ?
                new ObjectParameter("LeadNumber", leadNumber) :
                new ObjectParameter("LeadNumber", typeof(string));
    
            var noOfWeeksParameter = noOfWeeks.HasValue ?
                new ObjectParameter("NoOfWeeks", noOfWeeks) :
                new ObjectParameter("NoOfWeeks", typeof(int));
    
            var delivaeryDateParameter = delivaeryDate.HasValue ?
                new ObjectParameter("DelivaeryDate", delivaeryDate) :
                new ObjectParameter("DelivaeryDate", typeof(System.DateTime));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var dispatchAddressParameter = dispatchAddress != null ?
                new ObjectParameter("DispatchAddress", dispatchAddress) :
                new ObjectParameter("DispatchAddress", typeof(string));
    
            var dispatchNameParameter = dispatchName != null ?
                new ObjectParameter("DispatchName", dispatchName) :
                new ObjectParameter("DispatchName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cRMNumberParameter = cRMNumber != null ?
                new ObjectParameter("CRMNumber", cRMNumber) :
                new ObjectParameter("CRMNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateLead", customerNameParameter, leadDateParameter, leadByParameter, leadNumberParameter, noOfWeeksParameter, delivaeryDateParameter, pONumberParameter, dispatchAddressParameter, dispatchNameParameter, titleParameter, phoneNumberParameter, emailParameter, cRMNumberParameter);
        }
    
        public virtual int Get_AssemblyForBOMByOpportunityID(Nullable<int> opportunityID, Nullable<int> bOMID)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_AssemblyForBOMByOpportunityID", opportunityIDParameter, bOMIDParameter);
        }
    
        public virtual ObjectResult<Get_BOMPriceTotalsByOpportunityID_Result> Get_BOMPriceTotalsByOpportunityID(Nullable<int> opportunityID, Nullable<int> bOMID)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_BOMPriceTotalsByOpportunityID_Result>("Get_BOMPriceTotalsByOpportunityID", opportunityIDParameter, bOMIDParameter);
        }
    
        public virtual ObjectResult<Get_OpportunityBOMChildItemsByBOMItemID_Result> Get_OpportunityBOMChildItemsByBOMItemID(Nullable<int> opportunityID, string bOMItemID, Nullable<int> bOMID)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMItemIDParameter = bOMItemID != null ?
                new ObjectParameter("BOMItemID", bOMItemID) :
                new ObjectParameter("BOMItemID", typeof(string));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_OpportunityBOMChildItemsByBOMItemID_Result>("Get_OpportunityBOMChildItemsByBOMItemID", opportunityIDParameter, bOMItemIDParameter, bOMIDParameter);
        }
    
        public virtual ObjectResult<Get_OpportunityBOMItemsByOpportunityID_Result> Get_OpportunityBOMItemsByOpportunityID(Nullable<int> opportunityID, Nullable<int> bOMID, Nullable<bool> newBOM, Nullable<int> state)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            var newBOMParameter = newBOM.HasValue ?
                new ObjectParameter("NewBOM", newBOM) :
                new ObjectParameter("NewBOM", typeof(bool));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_OpportunityBOMItemsByOpportunityID_Result>("Get_OpportunityBOMItemsByOpportunityID", opportunityIDParameter, bOMIDParameter, newBOMParameter, stateParameter);
        }
    
        public virtual ObjectResult<Get_OpportunityBOMList_BOMDownload_Result> Get_OpportunityBOMList_BOMDownload(Nullable<int> opportunityID, Nullable<int> bOMID, Nullable<int> state)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_OpportunityBOMList_BOMDownload_Result>("Get_OpportunityBOMList_BOMDownload", opportunityIDParameter, bOMIDParameter, stateParameter);
        }
    
        public virtual ObjectResult<Get_OpportunityBOMListBYOpportunityID_Result> Get_OpportunityBOMListBYOpportunityID(Nullable<int> opportunityID)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_OpportunityBOMListBYOpportunityID_Result>("Get_OpportunityBOMListBYOpportunityID", opportunityIDParameter);
        }
    
        public virtual ObjectResult<Get_OpportunityByQuoteNo_Result> Get_OpportunityByQuoteNo(string quoteNo)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_OpportunityByQuoteNo_Result>("Get_OpportunityByQuoteNo", quoteNoParameter);
        }
    
        public virtual ObjectResult<Get_OpportunityList_Result> Get_OpportunityList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_OpportunityList_Result>("Get_OpportunityList");
        }
    
        public virtual int Get_OpportunityPickingList_BOMDownload(Nullable<int> opportunityID, Nullable<int> bOMID, Nullable<int> state)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_OpportunityPickingList_BOMDownload", opportunityIDParameter, bOMIDParameter, stateParameter);
        }
    
        public virtual int Get_PMFeeChargableAssemlyByBOMID(Nullable<bool> bOMID)
        {
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_PMFeeChargableAssemlyByBOMID", bOMIDParameter);
        }
    
        public virtual int Get_PMFeeNotChargableByBOMID(Nullable<bool> bOMID)
        {
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_PMFeeNotChargableByBOMID", bOMIDParameter);
        }
    
        public virtual ObjectResult<Get_ProjectMilestones_Result> Get_ProjectMilestones(Nullable<int> opportunityID, Nullable<int> bOMID)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ProjectMilestones_Result>("Get_ProjectMilestones", opportunityIDParameter, bOMIDParameter);
        }
    
        public virtual ObjectResult<Get_SaleTypes_Result> Get_SaleTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_SaleTypes_Result>("Get_SaleTypes");
        }
    
        public virtual ObjectResult<Get_Territory_Result> Get_Territory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Territory_Result>("Get_Territory");
        }
    
        public virtual int GetQuoteItemMasterByQuoteID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetQuoteItemMasterByQuoteID", idParameter);
        }
    
        public virtual int Insert_OpportunityBOMList(Nullable<int> opportunityID, Nullable<int> bOMID, Nullable<long> bOMItemsID, Nullable<decimal> qty, Nullable<decimal> itemPrice, Nullable<decimal> price, string customDescription, string customCode, Nullable<decimal> discount, Nullable<decimal> finalAgreedPrice, Nullable<decimal> priceAfterDiscount, Nullable<bool> isDiscountApply, Nullable<decimal> maximumQty, Nullable<int> state, Nullable<bool> isInTotal, Nullable<bool> isDecimalAllowed, string inkUsage)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            var bOMItemsIDParameter = bOMItemsID.HasValue ?
                new ObjectParameter("BOMItemsID", bOMItemsID) :
                new ObjectParameter("BOMItemsID", typeof(long));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var itemPriceParameter = itemPrice.HasValue ?
                new ObjectParameter("ItemPrice", itemPrice) :
                new ObjectParameter("ItemPrice", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var customDescriptionParameter = customDescription != null ?
                new ObjectParameter("CustomDescription", customDescription) :
                new ObjectParameter("CustomDescription", typeof(string));
    
            var customCodeParameter = customCode != null ?
                new ObjectParameter("CustomCode", customCode) :
                new ObjectParameter("CustomCode", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var finalAgreedPriceParameter = finalAgreedPrice.HasValue ?
                new ObjectParameter("FinalAgreedPrice", finalAgreedPrice) :
                new ObjectParameter("FinalAgreedPrice", typeof(decimal));
    
            var priceAfterDiscountParameter = priceAfterDiscount.HasValue ?
                new ObjectParameter("PriceAfterDiscount", priceAfterDiscount) :
                new ObjectParameter("PriceAfterDiscount", typeof(decimal));
    
            var isDiscountApplyParameter = isDiscountApply.HasValue ?
                new ObjectParameter("IsDiscountApply", isDiscountApply) :
                new ObjectParameter("IsDiscountApply", typeof(bool));
    
            var maximumQtyParameter = maximumQty.HasValue ?
                new ObjectParameter("MaximumQty", maximumQty) :
                new ObjectParameter("MaximumQty", typeof(decimal));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var isInTotalParameter = isInTotal.HasValue ?
                new ObjectParameter("IsInTotal", isInTotal) :
                new ObjectParameter("IsInTotal", typeof(bool));
    
            var isDecimalAllowedParameter = isDecimalAllowed.HasValue ?
                new ObjectParameter("IsDecimalAllowed", isDecimalAllowed) :
                new ObjectParameter("IsDecimalAllowed", typeof(bool));
    
            var inkUsageParameter = inkUsage != null ?
                new ObjectParameter("InkUsage", inkUsage) :
                new ObjectParameter("InkUsage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_OpportunityBOMList", opportunityIDParameter, bOMIDParameter, bOMItemsIDParameter, qtyParameter, itemPriceParameter, priceParameter, customDescriptionParameter, customCodeParameter, discountParameter, finalAgreedPriceParameter, priceAfterDiscountParameter, isDiscountApplyParameter, maximumQtyParameter, stateParameter, isInTotalParameter, isDecimalAllowedParameter, inkUsageParameter);
        }
    
        public virtual int Insert_ProjectMilestones(Nullable<int> opportunityID, Nullable<int> bOMID, Nullable<decimal> depositPerc, Nullable<decimal> deposit, Nullable<decimal> preDeliveryPerc, Nullable<decimal> preDelivery, Nullable<decimal> finalPerc, Nullable<decimal> final)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            var depositPercParameter = depositPerc.HasValue ?
                new ObjectParameter("DepositPerc", depositPerc) :
                new ObjectParameter("DepositPerc", typeof(decimal));
    
            var depositParameter = deposit.HasValue ?
                new ObjectParameter("Deposit", deposit) :
                new ObjectParameter("Deposit", typeof(decimal));
    
            var preDeliveryPercParameter = preDeliveryPerc.HasValue ?
                new ObjectParameter("PreDeliveryPerc", preDeliveryPerc) :
                new ObjectParameter("PreDeliveryPerc", typeof(decimal));
    
            var preDeliveryParameter = preDelivery.HasValue ?
                new ObjectParameter("PreDelivery", preDelivery) :
                new ObjectParameter("PreDelivery", typeof(decimal));
    
            var finalPercParameter = finalPerc.HasValue ?
                new ObjectParameter("FinalPerc", finalPerc) :
                new ObjectParameter("FinalPerc", typeof(decimal));
    
            var finalParameter = final.HasValue ?
                new ObjectParameter("Final", final) :
                new ObjectParameter("Final", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_ProjectMilestones", opportunityIDParameter, bOMIDParameter, depositPercParameter, depositParameter, preDeliveryPercParameter, preDeliveryParameter, finalPercParameter, finalParameter);
        }
    
        public virtual int Update_OpportunityAssemblyDetails(string quoteNo, string companyName, string representative, string customerType, Nullable<System.DateTime> deliveryDate, string pONumber, string authorisation, string campaign, string campaignCode, string salesPerson, Nullable<int> saleTypeID)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var representativeParameter = representative != null ?
                new ObjectParameter("Representative", representative) :
                new ObjectParameter("Representative", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var authorisationParameter = authorisation != null ?
                new ObjectParameter("Authorisation", authorisation) :
                new ObjectParameter("Authorisation", typeof(string));
    
            var campaignParameter = campaign != null ?
                new ObjectParameter("Campaign", campaign) :
                new ObjectParameter("Campaign", typeof(string));
    
            var campaignCodeParameter = campaignCode != null ?
                new ObjectParameter("CampaignCode", campaignCode) :
                new ObjectParameter("CampaignCode", typeof(string));
    
            var salesPersonParameter = salesPerson != null ?
                new ObjectParameter("SalesPerson", salesPerson) :
                new ObjectParameter("SalesPerson", typeof(string));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityAssemblyDetails", quoteNoParameter, companyNameParameter, representativeParameter, customerTypeParameter, deliveryDateParameter, pONumberParameter, authorisationParameter, campaignParameter, campaignCodeParameter, salesPersonParameter, saleTypeIDParameter);
        }
    
        public virtual int Update_OpportunityBOMListIsActiveFlag(Nullable<int> opportunityID, Nullable<int> bOMID, Nullable<int> state)
        {
            var opportunityIDParameter = opportunityID.HasValue ?
                new ObjectParameter("OpportunityID", opportunityID) :
                new ObjectParameter("OpportunityID", typeof(int));
    
            var bOMIDParameter = bOMID.HasValue ?
                new ObjectParameter("BOMID", bOMID) :
                new ObjectParameter("BOMID", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityBOMListIsActiveFlag", opportunityIDParameter, bOMIDParameter, stateParameter);
        }
    
        public virtual int Update_OpportunityCHOPComments(string quoteNo, string cHOPComments)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            var cHOPCommentsParameter = cHOPComments != null ?
                new ObjectParameter("CHOPComments", cHOPComments) :
                new ObjectParameter("CHOPComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityCHOPComments", quoteNoParameter, cHOPCommentsParameter);
        }
    
        public virtual int Update_OpportunityConsumableDetails(string quoteNo, string inkUsage, string solventUsage, string comments)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            var inkUsageParameter = inkUsage != null ?
                new ObjectParameter("InkUsage", inkUsage) :
                new ObjectParameter("InkUsage", typeof(string));
    
            var solventUsageParameter = solventUsage != null ?
                new ObjectParameter("SolventUsage", solventUsage) :
                new ObjectParameter("SolventUsage", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityConsumableDetails", quoteNoParameter, inkUsageParameter, solventUsageParameter, commentsParameter);
        }
    
        public virtual int Update_OpportunityCustomerDetails(string quoteNo, string dispatchAddress, string accountContactName, string accountContactTitle, string accountContactPhoneNo, string accountContactEmail, string financeDeal, string financeType, string financeApproved, Nullable<decimal> financeTotalAmount, Nullable<int> financePeriod)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            var dispatchAddressParameter = dispatchAddress != null ?
                new ObjectParameter("DispatchAddress", dispatchAddress) :
                new ObjectParameter("DispatchAddress", typeof(string));
    
            var accountContactNameParameter = accountContactName != null ?
                new ObjectParameter("AccountContactName", accountContactName) :
                new ObjectParameter("AccountContactName", typeof(string));
    
            var accountContactTitleParameter = accountContactTitle != null ?
                new ObjectParameter("AccountContactTitle", accountContactTitle) :
                new ObjectParameter("AccountContactTitle", typeof(string));
    
            var accountContactPhoneNoParameter = accountContactPhoneNo != null ?
                new ObjectParameter("AccountContactPhoneNo", accountContactPhoneNo) :
                new ObjectParameter("AccountContactPhoneNo", typeof(string));
    
            var accountContactEmailParameter = accountContactEmail != null ?
                new ObjectParameter("AccountContactEmail", accountContactEmail) :
                new ObjectParameter("AccountContactEmail", typeof(string));
    
            var financeDealParameter = financeDeal != null ?
                new ObjectParameter("FinanceDeal", financeDeal) :
                new ObjectParameter("FinanceDeal", typeof(string));
    
            var financeTypeParameter = financeType != null ?
                new ObjectParameter("FinanceType", financeType) :
                new ObjectParameter("FinanceType", typeof(string));
    
            var financeApprovedParameter = financeApproved != null ?
                new ObjectParameter("FinanceApproved", financeApproved) :
                new ObjectParameter("FinanceApproved", typeof(string));
    
            var financeTotalAmountParameter = financeTotalAmount.HasValue ?
                new ObjectParameter("FinanceTotalAmount", financeTotalAmount) :
                new ObjectParameter("FinanceTotalAmount", typeof(decimal));
    
            var financePeriodParameter = financePeriod.HasValue ?
                new ObjectParameter("FinancePeriod", financePeriod) :
                new ObjectParameter("FinancePeriod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityCustomerDetails", quoteNoParameter, dispatchAddressParameter, accountContactNameParameter, accountContactTitleParameter, accountContactPhoneNoParameter, accountContactEmailParameter, financeDealParameter, financeTypeParameter, financeApprovedParameter, financeTotalAmountParameter, financePeriodParameter);
        }
    
        public virtual int Update_OpportunityPMComments(string quoteNo, string pMComments)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            var pMCommentsParameter = pMComments != null ?
                new ObjectParameter("PMComments", pMComments) :
                new ObjectParameter("PMComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityPMComments", quoteNoParameter, pMCommentsParameter);
        }
    
        public virtual int Update_OpportunityTerritorySplit(string quoteNo, string territory1ID, string territory2ID, Nullable<int> territory1Split, Nullable<int> territory2Split)
        {
            var quoteNoParameter = quoteNo != null ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(string));
    
            var territory1IDParameter = territory1ID != null ?
                new ObjectParameter("Territory1ID", territory1ID) :
                new ObjectParameter("Territory1ID", typeof(string));
    
            var territory2IDParameter = territory2ID != null ?
                new ObjectParameter("Territory2ID", territory2ID) :
                new ObjectParameter("Territory2ID", typeof(string));
    
            var territory1SplitParameter = territory1Split.HasValue ?
                new ObjectParameter("Territory1Split", territory1Split) :
                new ObjectParameter("Territory1Split", typeof(int));
    
            var territory2SplitParameter = territory2Split.HasValue ?
                new ObjectParameter("Territory2Split", territory2Split) :
                new ObjectParameter("Territory2Split", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_OpportunityTerritorySplit", quoteNoParameter, territory1IDParameter, territory2IDParameter, territory1SplitParameter, territory2SplitParameter);
        }
    }
}
